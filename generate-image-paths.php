<?php

/*

Image Quality Assessment Test
Copyright (C) 2010  Steve Ward

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, version 3 of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

*/


//------------------------------------------------------------------------------


if (assert_options(ASSERT_BAIL, 1) === false)
{
	exit('"assert_options" function failed.');
}


//------------------------------------------------------------------------------


print '// generated by ' . escapeshellarg($argv[0]) . ' on ' . date_create()->format(DateTime::ISO8601) . "\n";
print '// phpversion(): ' . phpversion() . "\n";
print "// phpversion('json'): " . phpversion('json') . "\n";
print "\n";


//------------------------------------------------------------------------------


$debug = false;


function debug_print($var, $var_name)
{
	global $debug;

	if ($debug)
	{
		print "$var_name = ";
		var_export($var);
		print ";\n";
		print "\n";
	}
}


//------------------------------------------------------------------------------


$image_set_path = 'images/sets/';

debug_print($image_set_path, '$image_set_path');


//------------------------------------------------------------------------------


if (!file_exists($image_set_path))
{
	exit(escapeshellarg($image_set_path) . ' does not exist.');
}


if (!is_dir($image_set_path))
{
	exit(escapeshellarg($image_set_path) . ' is not a directory.');
}


//------------------------------------------------------------------------------


if (!chdir($image_set_path))
{
	exit('Could not chdir to ' . escapeshellarg($image_set_path) . '.');
}


//------------------------------------------------------------------------------


print 'iqatest.image_set_path = ' . escapeshellarg($image_set_path) . ';';
print "\n";
print "\n";


//------------------------------------------------------------------------------


print <<<EOT
// the results to be submitted

iqatest.results = {};

iqatest.results.id         = "";
iqatest.results.ip_address = "";
iqatest.results.host_name  = "";
iqatest.results.user_agent = "";

iqatest.results.screen_properties = {};

iqatest.results.screen_properties.width      = screen.width     ;
iqatest.results.screen_properties.height     = screen.height    ;
iqatest.results.screen_properties.colorDepth = screen.colorDepth;

iqatest.results.participant_information = {};


EOT;


//------------------------------------------------------------------------------


$image_sets = glob('*', GLOB_NOSORT | GLOB_ONLYDIR);

if ($image_sets === false)
{
	exit('"glob" function failed.');
}

$image_sets_len = count($image_sets);

debug_print($image_sets, '$image_sets');


if ($image_sets === false)
{
	exit('Could not find image sets matching pattern ' . escapeshellarg($image_set_path . '*') . '.');
}


if (sort($image_sets) == false)
{
	exit('Error sorting image sets.');
}

debug_print($image_sets, '$image_sets');


//------------------------------------------------------------------------------


/*

When encoding PHP objects and associative arrays to JSON, you must put parentheses around the JSON.

ECMAScript Language Specification

ECMA-262
5th Edition / December 2009

12.4 Expression Statement
Note:
An ExpressionStatement cannot start with an opening curly brace because that might make it ambiguous with a Block.

*/

//print 'iqatest.results.image_sets = (' . json_encode($image_sets) . ');';
print 'iqatest.results.image_sets = ' . json_encode($image_sets) . ';';
print "\n";
print "\n";


//------------------------------------------------------------------------------


$image_set_indexes = range(0, $image_sets_len - 1); // ex: 0...5 (length: 6)

debug_print($image_set_indexes, '$image_set_indexes');

assert($image_sets_len == count($image_set_indexes));


//------------------------------------------------------------------------------


print 'iqatest.results.image_set_indexes = ' . json_encode($image_set_indexes) . ';';
print "\n";
print "\n";


//------------------------------------------------------------------------------


$distorted_pattern = 'distorted*';

debug_print($distorted_pattern, '$distorted_pattern');


//------------------------------------------------------------------------------


$reference_pattern = 'reference*';

debug_print($reference_pattern, '$reference_pattern');


//------------------------------------------------------------------------------


$images = array();

$image_indexes = array();

$image_comparisons = array();


//------------------------------------------------------------------------------


foreach($image_sets as $image_set)
{
	//--------------------------------------------------------------------------

	debug_print($image_set, '$image_set');

	//--------------------------------------------------------------------------

	if (!chdir($image_set))
	{
		exit('Could not chdir to ' . escapeshellarg($image_set) . '.');
	}

	//--------------------------------------------------------------------------
	// get the reference image

	$reference = glob($reference_pattern, GLOB_NOSORT);

	//--------------------------------------------------------------------------
	// validate the reference image

	if ($reference === false)
	{
		exit('"glob" function failed.');
	}

	if (empty($reference))
	{
		exit('Could not find reference image for image set ' . escapeshellarg($image_set) . '.');
	}

	$reference_len = count($reference);

	if ($reference_len > 1)
	{
		exit('There may only be one reference image for image set ' . escapeshellarg($image_set) . '.');
	}

	debug_print($reference, '$reference');

	assert($reference_len == 1);

	//--------------------------------------------------------------------------
	// get the distorted images

	$distorted = glob($distorted_pattern, GLOB_NOSORT);

	//--------------------------------------------------------------------------
	// validate the distorted images

	if ($distorted === false)
	{
		exit('"glob" function failed.');
	}

	if (empty($distorted))
	{
		exit('Could not find distorted images for image set ' . escapeshellarg($image_set) . '.');
	}

	$distorted_len = count($distorted);

	debug_print($distorted, '$distorted');

	assert($distorted_len > 0);

	if (natcasesort($distorted) == false)
	{
		exit('Error sorting distorted images.');
	}

	// do not maintain key association
	$distorted = array_values($distorted);

	debug_print($distorted, '$distorted');

	//--------------------------------------------------------------------------

	// the reference image is at index 0

	$image_set_arr = array_merge($reference, $distorted);

	$image_set_arr_len = count($image_set_arr);

	debug_print($image_set_arr, '$image_set_arr');

	assert($image_set_arr_len == ($reference_len + $distorted_len));

	$images[] = $image_set_arr;

	//--------------------------------------------------------------------------

	// indexes of the distorted images
	$distorted_indexes = range(1, $distorted_len); // ex: 1...10 (length: 10)

	// indexes of the reference image
	// the reference image is always index 0
	$reference_indexes = array_fill($distorted_len, $distorted_len, 0); // ex: 11...20 (length: 10)

	assert(count($distorted_indexes) == count($reference_indexes));

	//--------------------------------------------------------------------------

	// fill the image_indexes array

	$image_index_arr = array_merge($distorted_indexes, $reference_indexes);

	$image_index_arr_len = count($image_index_arr);

	debug_print($image_index_arr, '$image_index_arr');

	// there are twice as many image_indexes as distorted images
	assert($distorted_len * 2 == $image_index_arr_len);

	$image_indexes[] = $image_index_arr;

	//--------------------------------------------------------------------------

	// fill the image_comparisons array

	$image_comparison_arr = array_fill(0, $image_set_arr_len, 0);

	$image_comparison_arr_len = count($image_comparison_arr);

	debug_print($image_comparison_arr, '$image_comparison_arr');

	assert($image_set_arr_len == $image_comparison_arr_len);

	$image_comparisons[] = $image_comparison_arr;

	//--------------------------------------------------------------------------

	if (!chdir('..'))
	{
		exit('Could not chdir to ' . escapeshellarg('..') . '.');
	}

	//--------------------------------------------------------------------------

}


//------------------------------------------------------------------------------


debug_print($images, '$images');

print 'iqatest.results.images = ' . json_encode($images) . ';';
print "\n";
print "\n";


//------------------------------------------------------------------------------


debug_print($image_indexes, '$image_indexes');

print 'iqatest.results.image_indexes = ' . json_encode($image_indexes) . ';';
print "\n";
print "\n";


//------------------------------------------------------------------------------


debug_print($image_comparisons, '$image_comparisons');

print 'iqatest.results.image_comparisons = ' . json_encode($image_comparisons) . ';';
print "\n";
print "\n";


//------------------------------------------------------------------------------

?>
